# https://git-scm.com/docs/git-config
[include]
  path = ~/.gitconfig.local # obfuscate PII
[user]
  name = Alex Young
  useConfigOnly = true # do not infer defaults
[alias]
  choose = !git $(git aliases no-color | fzf | cut -d' ' -f1) # fuzzy execute an alias

  # Staging
  a = !git add --intent-to-add . && git add --patch # interactive staging, including new files
  c = commit
  wip = !git a && git c --message='wip'
  untrack = rm --cache -- # remove from git but keep file system changes

  # Reset
  back = !git reset --soft HEAD~ && git reset && git d # undo last commit but keep changes
  undo = !git clear && git reset --hard HEAD~ # hard delete last commit
  save = !git reset && git a && git c # interactive committing
  rho = !git fo && git reset --hard origin/$(git name) # mirror origin

  # Checkout
  co = checkout
  com = checkout master
  cob = checkout -b
  wipe = !git checkout -- $(git status --porcelain | fzf | cut -c 4-) # hard undo on fuzzy file
  recent = !git committed | fzf | cut -d$'\t' -f1 | xargs git co # fuzzy select recently committed branch
  committed = !git for-each-ref --sort='-committerdate' --format='%(refname)%09%(committerdate:relative)' refs/heads | sed -e 's,refs/heads/,,'

  # Stash
  store = !git a && git stash
  soon = !git add . && git stash
  clear = !git add . && git reset --hard HEAD
  stl = stash list
  sts = stash show
  stp = stash pop
  sta = stash apply

  # Diff
  d = !git add --intent-to-add . && git diff
  dsg = d --staged
  dr = !git fo && git d FETCH_HEAD..HEAD
  dom = !git fo && git d origin/master HEAD

  # Rebase
  rb = rebase
  rbr = "!f() { git fo; git rb origin/$1; }; f" # any remote branch
  rbm = !git rbr master # remote master
  rbo = !git name | xargs git rbr # remote tracking branch
  rbi = rebase --interactive
  rbmi = !git fo && git rbi origin/master
  rbc = !git a && git rebase --continue
  rba = rebase --abort
  rbfz = !git rbi $(git tree | fzf | cut -d' ' -f2)~ # interactive from a fuzzy commit
  fix = !git squash $(git tree | fzf | cut -d' ' -f2) # apply working patch to fuzzy commit
  squash = "!f() { git a; git c --fixup=$1; git rbi --autosquash $1~; }; f"

  # Remote
  fo = fetch origin --tags
  p = push
  force = push --force
  publish = !git name | xargs git push --set-upstream origin # automatic tracking
  tg = "!f() { git tag $1; git push origin tags/$1; }; f" # parity with remote
  untag = "!f() { git tag -d $1; git push origin :refs/tags/$1; }; f" # parity with remote
  shake = !git branch --merged | grep -v '\\*' | xargs -n 1 git branch --delete # delete branches that have been merged into origin

  # External
  edit = !vim $(git status --short | fzf | cut -c 4-) # fuzzy edit a modified file
  gui = !github . # open Github Desktop
  pr = !gh pr create --fill --web
  prs = !gh pr status

  # Info
  st = status
  last = show HEAD
  name = rev-parse --abbrev-ref HEAD # name of branch
  tree = log --graph --date=relative --pretty=tree # better git log
  history = "!f() { git log -- $1 | tig; }; f"
  praise = blame -w
  stat = !git add --intent-to-add . && git --no-pager diff --stat && git --no-pager diff --numstat # line change summary
  changelog = !git log --oneline | fzf | cut -d' ' -f1 | xargs -I _ git log --oneline --pretty=diff _~..HEAD | sed -e 's/^/- /'
  users = shortlog --summary --numbered
[blame]
  date = human # default is ISO 8601
[branch]
  autoSetupRebase = always # configure branch.name.rebase whenever creating a new branch
[commit]
  gpgsign = true
  verbose = true # show changes while editing commit message
[core]
  excludesfile = ~/.gitignore # global ignore
  editor = vim # use vim when editing git messages
[diff "applescript"] # enable diff on *.scpt binaries
  textconv = osadecompile
  binary = true
[diff "plist"]
  textconv = plutil -convert xml1 -o -
[fetch]
  prune = true # automatically remove refs that no longer exist on remote
[filter "lfs"] # configured via git-lfs
  clean = git-lfs clean -- %f
  process = git-lfs filter-process
  required = true
  smudge = git-lfs smudge -- %f
[help]
  autocorrect = 1 # fix typos
[merge]
  ff = only # merge commits are noisy
[pager] # prettier patches
  diff = diff-so-fancy | less --tabs=2 -RFX
  show = diff-so-fancy | less --tabs=2 -RFX
[pull]
  rebase = true # rebase instead of merge
  ff = only # merge commits are noisy
[push]
  followTags = true # automatically push tags
  default = current # push to remote branch with the same name
[pretty] # format templates
  tree = "%Cgreen%h%Creset -%C(auto)%d%Creset %s %Cblue(%an %ad)%Creset"
  diff = "[%h] %s (%aN)"
[rebase]
  autoStash = true # allow rebases on a dirty working directory
  stat = true # show diffstat of upstream changes since last rebase
[rerere]
  enabled = true # cache conflict resolutions for reuse
  autoUpdate = true # update cache after each successful resolution
[stash]
  showPatch = true # always show diff
[status]
  showStash = true # entry count in stash list
  showUntrackedFiles = all # expand new directories
[tag]
  gpgsign = true
  sort = version:refname # order by semver
[url "ssh://git@github.com/"]
  insteadOf = https://github.com/ # fast failure on ssh misconfiguration
